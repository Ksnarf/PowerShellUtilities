# Filename   : cve-2021-26084-update.ps1
# Description: Temporary workaround for CVE-2021-26084 for Confluence instances running on Microsoft Windows
# Reference  : https://confluence.atlassian.com/display/DOC/Confluence+Security+Advisory+-+2021-08-25
# Usage      : Get-Content .\cve-2021-26084-update.ps1 | powershell.exe -noprofile -
# Version    : 1.5

# ###########################################
# Update user specific data in this section

# set this to where Confluence is installed
# e.g. $INSTALLATION_DIRECTORY='C:\Program Files\Atlassian\Confluence'
$INSTALLATION_DIRECTORY='Set_Your_Confluence_Install_Dir_Here'


# ########################################
# Do not change anything below this line

if ((Test-Path $INSTALLATION_DIRECTORY) -eq $false) {
    Write-Output "ERROR: '$INSTALLATION_DIRECTORY' is not a valid directory.";
    exit 1;
}

# Change to Install Directory
Write-Output "changing to directory '$INSTALLATION_DIRECTORY'"
Set-Location -Path "$INSTALLATION_DIRECTORY"
if (! $?) {
    Write-Output "ERROR: Failed to change to the directory $INSTALLATION_DIRECTORY!";
    exit 1;
}

# ######################################
# File 1 of 5

Write-Output "File 1: 'confluence\users\user-dark-features.vm':"
Write-Output "   a. backing up file.. "
if ((Test-Path -Path confluence\users\user-dark-features.vm.original) -eq $false) {
    copy confluence\users\user-dark-features.vm confluence\users\user-dark-features.vm.original
}
Write-Output "   b. updating file.. "
(Get-Content -path "confluence\users\user-dark-features.vm") -Replace '(Enable dark feature.+value=)[^"]+"', '$1featureKey"' | Out-File confluence\users\user-dark-features.vm.dos
[string]::Join( "`n", (gc confluence\users\user-dark-features.vm.dos)) | sc confluence\users\user-dark-features.vm
Write-Output "   c. showing file changes.."
compare-object $(Get-Content confluence\users\user-dark-features.vm) $(Get-Content confluence\users\user-dark-features.vm.original) | format-list
Write-Output "   d. file updated successfully!"
Write-Output ""

# ######################################
# File 2 of 5

Write-Output "File 2: 'confluence\login.vm':"
Write-Output "   a. backing up file.. "
if ((Test-Path -Path confluence\login.vm.original) -eq $false) {
    copy confluence\login.vm confluence\login.vm.original
}
Write-Output "   b. updating file.. "
(Get-Content -path "confluence\login.vm") -Replace '(#tag.*Hidden.*value=)[^"]+"', '$1token"' | Out-File confluence\login.vm.dos
[string]::Join( "`n", (gc Lconfluence\login.vm.dos)) | sc confluence\login.vm
Write-Output "   c. showing file changes.."
compare-object $(Get-Content confluence\login.vm) $(Get-Content confluence\login.vm.original) | format-list
Write-Output "   d. file updated successfully!"
Write-Output ""

# ######################################
# File 3 of 5

Write-Output "File 3: 'confluence\pages\createpage-entervariables.vm':"
Write-Output "   a. backing up file.. "
if ((Test-Path -Path confluence\pages\createpage-entervariables.vm.original) -eq $false) {
    copy confluence\pages\createpage-entervariables.vm confluence\pages\createpage-entervariables.vm.original
}
Write-Output "   b. updating file.. "
(Get-Content -path "confluence\pages\createpage-entervariables.vm") -Replace '("Hidden" "name=.([a-zA-Z]+)." "value=).\$[!l][^"]+', '$1$2"' | Out-File confluence\pages\createpage-entervariables.vm.dos
[string]::Join( "`n", (gc confluence\pages\createpage-entervariables.vm.dos)) | sc confluence\pages\createpage-entervariables.vm
Write-Output "   c. showing file changes.."
compare-object $(Get-Content confluence\pages\createpage-entervariables.vm) $(Get-Content confluence\pages\createpage-entervariables.vm.original) | format-list
Write-Output "   d. file updated successfully!"
Write-Output ""

# ######################################
# File 4 of 5

Write-Output "File 4: 'confluence\template\custom\content-editor.vm':"
Write-Output "   a. backing up file.. "
if ((Test-Path -Path confluence\template\custom\content-editor.vm.original) -eq $false) {
    copy confluence\template\custom\content-editor.vm confluence\template\custom\content-editor.vm.original
}
Write-Output "   b. updating file.. "
(Get-Content -path "confluence\template\custom\content-editor.vm") -Replace '("Hidden" "name=.([a-zA-Z]+)." "value=).\$[!l][^"]+"', '$1$2"' | Out-File confluence\template\custom\content-editor.vm.dos
(Get-Content -path "confluence\template\custom\content-editor.vm.dos") -Replace '("Hidden" "id=sourceTemplateId.*value=)[^"]+"', '$1templateId"' | Out-File confluence\template\custom\content-editor.vm.dos
[string]::Join( "`n", (gc confluence\template\custom\content-editor.vm.dos)) | sc confluence\template\custom\content-editor.vm
Write-Output "   c. showing file changes.."
compare-object $(Get-Content confluence\template\custom\content-editor.vm) $(Get-Content confluence\template\custom\content-editor.vm.original) | format-list
Write-Output "   d. file updated successfully!"
Write-Output ""

# ######################################
# File 5 of 5

Add-Type -AssemblyName System.IO.Compression.FileSystem -ErrorAction Stop

$Destination = (Get-Location).Path
$Overwrite = $true
$Filter = '*editor-preload-container.vm'
$JAR_FULL_NAME=""

Write-Output "File 5: 'confluence\WEB-INF\atlassian-bundled-plugins\confluence-editor-loader*.jar':"
foreach($jarfile in Get-ChildItem "confluence\WEB-INF\atlassian-bundled-plugins" -Filter confluence-editor-loader*.jar){
        if ((Test-Path $Destination) -eq $false)
        {
            $null = mkdir $Destination
        }
        $JAR_FULL_NAME=$jarfile.FullName
        Write-Output "   a. Found JAR file: $JAR_FULL_NAME"
        $zipfile = [System.IO.Compression.ZipFile]::OpenRead($jarfile.FullName)
        $zipfile.Entries |
            Where-Object { $_.FullName -like $Filter } |
                ForEach-Object -Process {
                    $FilePath = Join-Path -Path $Destination -ChildPath templates\editor-preload-container.vm
                    $TemplatesFilePath = Join-Path -Path $Destination -ChildPath templates
                    if ((Test-Path $TemplatesFilePath) -eq $false)
                    {
                        $null = mkdir $TemplatesFilePath
                    }

                    Write-Output "   b. Extracting templates\editor-preload-container.vm to $FilePath"
                    [System.IO.Compression.ZipFileExtensions]::ExtractToFile($_,$FilePath,$Overwrite)
                }
        $zipfile.Dispose()
    }
# editor-preload-container.vm is now extracted into templates/editor-preload-container.vm

# Regex search and replace
if ((Test-Path -Path "$Destination\templates\editor-preload-container.vm") -eq $true)
{
    Write-Output "   c. backing up file.. "
    if ((Test-Path -Path "$Destination\templates\editor-preload-container.vm.original") -eq $false) {
        copy "$Destination\templates\editor-preload-container.vm" "$Destination\templates\editor-preload-container.vm.original"
    }
    Write-Output "   d. updating file.. "
    (Get-Content -path "$Destination\templates\editor-preload-container.vm") -Replace '("Hidden" "id=syncRev.*value=)[^"]+"', '$1syncRev"' | Out-File "$Destination\templates\editor-preload-container.vm.dos"
    [string]::Join( "`n", (gc "$Destination\templates\editor-preload-container.vm.dos")) | sc "$Destination\templates\editor-preload-container.vm"
    Write-Output "   e. showing file changes.. "
    compare-object $(Get-Content "$Destination\templates\editor-preload-container.vm") $(Get-Content "$Destination\templates\editor-preload-container.vm.original") | format-list

    # Re-zip the file back into the JAR
    Write-Output "   f. updating $JAR_FULL_NAME with $Destination\templates\editor-preload-container.vm.. "
    $compressionLevel = [System.IO.Compression.CompressionLevel]::Fastest
    foreach($jarfile in Get-ChildItem "confluence\WEB-INF\atlassian-bundled-plugins" -Filter confluence-editor-loader*.jar){
            $zipfile = [System.IO.Compression.ZipFile]::Open($jarfile.FullName, 'update')

            $Entry = $zipfile.GetEntry('templates/editor-preload-container.vm')
            if ($Entry)
            {
                $Entry.Delete();
            }
            $Entry = $zipfile.GetEntry('templates\editor-preload-container.vm')
            if ($Entry)
            {
                $Entry.Delete();
            }

            $FilePath = Join-Path -Path $Destination -ChildPath templates\editor-preload-container.vm
            [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zipfile, $FilePath, 'templates/editor-preload-container.vm', $compressionLevel)
            $zipfile.Dispose()
       }

    Write-Output "   g. Cleaning temp files"
    if ((Test-Path -Path "$Destination\templates\editor-preload-container.vm") -eq $true) {
        Remove-Item "$Destination\templates\editor-preload-container.vm"
    }
    if ((Test-Path -Path "$Destination\templates\editor-preload-container.vm.dos") -eq $true) {
        Remove-Item "$Destination\templates\editor-preload-container.vm.dos"
    }
    if ((Test-Path -Path "$Destination\templates\editor-preload-container.vm.original") -eq $true) {
        Remove-Item "$Destination\templates\editor-preload-container.vm.original"
    }
    if ((Test-Path -Path "$Destination\templates") -eq $true) {
        Remove-Item "$Destination\templates"
    }

    # List file and confirm it has recently been updated!
    Write-Output "   h. Listing JAR update time stamp"
    foreach($jarfile in Get-ChildItem "confluence\WEB-INF\atlassian-bundled-plugins" -Filter confluence-editor-loader*.jar){
      Write-Output $jarfile
    }
}
else
{
    Write-Output "   b. JAR / templates\editor-preload-container.vm not present in current install, skipping step"
}

Write-Output ""
Write-Output "Update completed!"
